---
description: Règles de factorisation et de réutilisabilité des classes Tailwind dans les composants React
globs: src/**/*.{tsx,jsx}
alwaysApply: true
---

# Rule 2.2 – Réutilisabilité des classes Tailwind (tailwind-reusability)

## Objectif

Éviter la duplication de classes Tailwind et améliorer la lisibilité, la maintenabilité et la cohérence du code UI en structurant proprement les composants.

## Technologies concernées

- TailwindCSS
- React (TSX/JSX)
- ShadCN/UI

## Principes

- Si un groupe de classes Tailwind est répété **3 fois ou plus**, il doit être :
  - soit **extrait dans un composant React** dédié (ex : `Badge`, `Card`, `SectionHeader`)
  - soit **refactoré avec `@apply`** dans un fichier CSS dédié (`components.css`)
- Les composants ShadCN peuvent servir de base pour l’extraction (`Button`, `Alert`, etc.)
- L’approche **utility-first** ne doit pas justifier un code illisible ou dupliqué.
- Toujours privilégier un composant typé plutôt qu’un simple `div` avec 10 classes clonées.

## Exemple – À éviter

```tsx
<div className="text-sm font-medium text-muted-foreground px-3 py-1 border rounded-full bg-background">
  En attente
</div>

<span className="text-sm font-medium text-muted-foreground px-3 py-1 border rounded-full bg-background">
  En cours
</span>
```

## Exemple – Recommandé

```tsx
export const StatusBadge = ({ children }: { children: React.ReactNode }) => (
  <span className="text-sm font-medium text-muted-foreground px-3 py-1 border rounded-full bg-background">
    {children}
  </span>
);

// Utilisation
<StatusBadge>En cours</StatusBadge>
```

## Option alternative – Utiliser `@apply` dans un fichier CSS

```css
/* components.css */
.badge {
  @apply text-sm font-medium text-muted-foreground px-3 py-1 border rounded-full bg-background;
}
```

```tsx
<span className="badge">En cours</span>
```

## Bonnes pratiques

- Regrouper les composants extraits dans `/components/ui` ou `/components/common`
- Si tu veux styliser dynamiquement : utiliser `clsx()` ou `cva()` pour gérer les variantes
- Pas de `className` à rallonge (>150 caractères) dans plusieurs fichiers différents
- Créer une `badge`, une `pill`, une `tag` ou une `alert` dès que nécessaire → et les réutiliser

## Règle d’or

- Si tu copies-colles un bloc Tailwind une 3ᵉ fois, **tu crées un composant ou un token**.  
- Répéter n’est pas une optimisation, c’est une dette technique.
