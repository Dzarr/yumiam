---
description: Convention de gestion des erreurs dans une application React (mutation, requêtes, affichage UX)
globs: src/**/*.{tsx,ts}
alwaysApply: true
---

# Rule 5.2 – Gestion centralisée des erreurs (error-handling-pattern)

## Objectif

Fournir une stratégie cohérente de gestion des erreurs côté client, permettant d’informer l’utilisateur clairement, d’éviter les crashs silencieux et de faciliter le débogage en développement.

## Technologies concernées

- React (TSX)
- React Query
- Supabase
- Sonner / react-hot-toast
- Sentry (optionnel)

## Principes

- Chaque appel réseau (query, mutation, action asynchrone) doit être encapsulé dans un `try/catch` ou une gestion d’erreur native (`onError`)
- L’erreur est toujours affichée à l’utilisateur **via toast** s’il y a impact visible
- L’erreur est toujours loggée en dev (via `console.error`) ou en prod (via `Sentry.captureException`) si nécessaire
- Les messages doivent être **actionnables et clairs** : pas de `"Something went wrong"`

## Exemple – Mutation avec toast + fallback dev

```ts
import { toast } from "sonner";

const handleSubmit = async () => {
  try {
    const { error } = await supabase.from("guests").insert({ full_name: "Jean" });
    if (error) throw error;
    toast.success("Invité ajouté");
  } catch (err) {
    console.error("Erreur ajout invité", err);
    toast.error("Impossible d’ajouter l’invité");
  }
};
```

## Exemple – Mutation React Query avec `onError`

```ts
useMutation({
  mutationFn: updateGuest,
  onError: (error) => {
    toast.error("Erreur lors de la mise à jour");
    console.error("updateGuest error", error);
  }
});
```

## Bonnes pratiques

- Prévoir un composant d’erreur global (`<ErrorBoundary>`) pour les zones critiques (pages complètes)
- Afficher une UI fallback (`<ErrorCard />`, `message`, `button retry`) sur les pages de liste / détail
- En dev, toutes les erreurs doivent être visibles dans la console

## Formulations recommandées

| Contexte | Message UX |
|----------|-------------|
| Chargement échoué | `"Impossible de charger les données"` |
| Création échouée | `"Erreur lors de l’ajout"` |
| Accès refusé | `"Vous n’avez pas l’autorisation"` |
| Réseau indisponible | `"Connexion réseau perdue"` |

## Règle d’or

Une erreur = une explication + une trace + une UX propre.  
L’utilisateur doit comprendre ce qui ne va pas, le développeur doit savoir où chercher.
