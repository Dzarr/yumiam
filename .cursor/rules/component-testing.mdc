---
description: Convention de test des composants React avec Vitest, Testing Library et snapshots si nécessaire
globs: src/components/**/*.test.{ts,tsx}
alwaysApply: true
---

# Rule 6.3 – Tests des composants UI (component-testing)

## Objectif

Garantir la stabilité, la non-régression visuelle et la testabilité des composants en appliquant des conventions claires pour les tests unitaires, comportementaux et snapshot.

## Technologies concernées

- React
- Vitest
- @testing-library/react
- TailwindCSS (non testé directement)
- ShadCN/UI

## Principes

- Chaque composant critique (logique, interactif ou complexe visuellement) doit avoir un fichier `.test.tsx` dans le même dossier
- Utiliser **Testing Library** pour tester le comportement, le rendu et les interactions
- Les composants purement visuels peuvent être testés via **snapshot**
- Les tests doivent être **courts, ciblés et lisibles**. Un test = un cas d’usage
- Tous les composants doivent être testés dans un environnement mimant leur usage réel (ex: wrapped dans un provider si nécessaire)

## Exemple – Test de rendu simple

```tsx
import { render, screen } from "@testing-library/react";
import { StatusBadge } from "./StatusBadge";

describe("StatusBadge", () => {
  it("affiche le texte passé en children", () => {
    render(<StatusBadge>Validé</StatusBadge>);
    expect(screen.getByText("Validé")).toBeInTheDocument();
  });
});
```

## Exemple – Test d’interaction

```tsx
import { render, screen, fireEvent } from "@testing-library/react";
import { Button } from "@/components/ui/button";

it("déclenche l’action au clic", () => {
  const handleClick = vi.fn();
  render(<Button onClick={handleClick}>Cliquer</Button>);
  fireEvent.click(screen.getByText("Cliquer"));
  expect(handleClick).toHaveBeenCalledTimes(1);
});
```

## Exemple – Snapshot

```tsx
import { render } from "@testing-library/react";
import { EmptyState } from "./EmptyState";

it("correspond au snapshot", () => {
  const { container } = render(<EmptyState message="Aucun résultat" />);
  expect(container).toMatchSnapshot();
});
```

## Bonnes pratiques

- Un fichier `.test.tsx` = un seul composant
- Préférer `getByRole`, `getByLabelText`, `getByText` → pas de `querySelector`
- Utiliser `vi.fn()` pour simuler les callbacks
- Si le composant utilise des contextes : wrapper dans le provider de test (ex: `AuthProvider`, `QueryClientProvider`, etc.)

## Règle d’or

> Un composant testé est un composant qu’on peut modifier sans peur.  
> Les tests ne doivent pas bloquer la création, mais valider la stabilité.
