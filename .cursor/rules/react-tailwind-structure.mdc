---
description: Convention de structure de composants React avec TailwindCSS
globs: src/**/*.{js,ts,jsx,tsx}
alwaysApply: true
---
# Rule 1.1 – Structure des composants React + Tailwind

## Objectif
Assurer une structure de code claire, maintenable et cohérente pour tous les composants React utilisant TailwindCSS.

## Technologies concernées
- React (JSX/TSX)
- TailwindCSS
- ShadCN (optionnel)

## Principes
- Un composant = un seul fichier `.tsx` avec nom explicite (ex : `GuestCard.tsx`)
- Pas de logique métier complexe dans les composants UI → extraire dans `/lib/` ou `/hooks/`
- Utiliser `const` pour déclarer les composants (`const GuestCard = () => {…}`)
- Toujours passer les props de manière typée (`type Props = { ... }`)
- Les classes Tailwind sont écrites **directement** dans les balises, pas dans des fichiers CSS
- Utiliser `clsx` ou `classnames` uniquement si nécessaire pour logique conditionnelle
- Pas de `styled-components`, `emotion` ou CSS-in-JS
- Éviter les `div` anonymes : préférer `section`, `article`, `button`, etc.

## Structure recommandée

```
src/
  components/
    ui/
      Button.tsx
      Input.tsx
    planner/
      GuestCard.tsx
      TableLayout.tsx
    layout/
      Header.tsx
      Sidebar.tsx
```

## Bonnes pratiques
Le nom du fichier = le nom du composant (GuestCard.tsx → GuestCard)

Tous les composants doivent commencer par une majuscule

Export par défaut interdit → toujours export const

Un composant de base (comme Button) peut être généré via ShadCN puis étendu si besoin

Composants affichant des listes : préférez map() explicite dans le JSX au rendu conditionnel obscur

## Accessibilité
Tous les composants interactifs doivent avoir aria-label ou équivalent

Utiliser tabIndex={0} pour les éléments personnalisés interactifs

Privilégier les button réels aux div cliquables

## Règle d’or
Un composant bien structuré est court, clair, et sans logique métier.