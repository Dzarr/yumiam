---
description: Convention de gestion des couches interactives dans une interface React modulaire avec Tailwind v4
globs: src/**/*.{tsx,jsx}
alwaysApply: true
---

# Rule 3.2 – Gestion des couches d’interaction (interaction-layering)

## Objectif

Structurer et hiérarchiser les couches visuelles interactives (modals, overlays, tooltips, toasts…) pour éviter les conflits de `z-index`, assurer l’accessibilité, et garantir une interface stable, fluide et maintenable.

## Technologies concernées

- React (TSX/JSX)
- Tailwind CSS v4+
- ShadCN/UI
- @dnd-kit (pour DragOverlay)
- Headless UI ou Radix (optionnel)

## Principes

- **Un seul composant interactif visible à la fois par zone logique**
- Tous les éléments flottants (modals, tooltips, overlays) doivent être rendus via `<Portal />` (ex: ShadCN, Radix)
- Les `z-index` doivent toujours provenir d’un système standardisé : via tokens CSS ou via `z-[var(--z-modal)]`
- Interdiction d’utiliser des valeurs brutes (`z-[9999]`, `z-[111111]`) ou arbitraires

## Tokens de z-index recommandés (dans `/styles/tokens.css`)

```css
@layer tokens {
  :root {
    --z-base: 0;
    --z-header: 10;
    --z-dropdown: 20;
    --z-overlay: 30;
    --z-modal: 40;
    --z-toast: 50;
    --z-max: 60;
  }
}
```

## Utilisation recommandée

```tsx
<Dialog open={isOpen}>
  <DialogContent className="z-[var(--z-modal)]">
    <DndContext sensors={...}>
      <SortableContext items={...}>
        {/* contenu */}
      </SortableContext>
      <DragOverlay className="z-[var(--z-overlay)]">
        <Preview />
      </DragOverlay>
    </DndContext>
  </DialogContent>
</Dialog>
```

## Bonnes pratiques

- Regrouper les overlays globaux (`<Toaster />`, `<ModalProvider />`, `<DragOverlayRoot />`) dans une couche fixe (ex: `_app.tsx`)
- Prioriser `Dialog`, `Popover`, `Tooltip` via ShadCN pour cohérence UI + accessibilité
- Si plusieurs éléments sont conditionnels : masquer ceux non prioritaires (`showTooltip && !isModalOpen`)
- Éviter les empilements visuels sans justification claire

## Accessibilité

- Gérer le **focus cycle** dans les modals (`initialFocus`, `onClose`, `autoFocus`)
- Un seul composant focusable à la fois
- Les overlays doivent être accessibles clavier (`Escape`) et invisibles pour les screen readers en arrière-plan (`aria-hidden="true"`)

## Règle d’or

Chaque composant interactif a une couche, un rôle et un cycle de vie.  
Les `z-index` viennent du design system, **pas du debug console**.  
**Pas d’empilement anarchique, pas de valeur magique.**
