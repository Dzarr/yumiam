---
description: Convention pour animer les transitions entre composants avec Framer Motion (`layoutId`, `AnimatePresence`, `motion.div`)
globs: src/**/*.{tsx,jsx}
alwaysApply: true
---

# Rule 7.2 – Transitions entre états ou composants avec Motion (motion-layout)

## Objectif

Utiliser les fonctionnalités avancées de **Framer Motion** pour animer les transitions entre composants, éléments ou pages (modal, drag, étapes UI) en assurant une continuité visuelle fluide, élégante et cohérente.

## Technologies concernées

- React
- `@motion.dev/react`
- `layoutId`
- `AnimatePresence`
- TailwindCSS (pour structure et style)

---

## Concepts clés

- `layoutId` : permet à deux composants avec le **même identifiant** de se transformer visuellement de l’un à l’autre
- `AnimatePresence` : gère proprement l’entrée/sortie de composants conditionnels
- `motion.div layout` : active les animations liées à la position et la taille

---

## Exemple – Transfert visuel entre deux composants

```tsx
<motion.div layoutId="card-42" className="rounded-lg bg-white shadow">
  ...
</motion.div>
```

Lorsque ce composant est remplacé par un autre avec le **même `layoutId`**, Framer Motion effectue la transition entre les deux.

---

## Exemple – Animation de modal avec `AnimatePresence`

```tsx
import { AnimatePresence, motion } from "@motion.dev/react";

<AnimatePresence>
  {isOpen && (
    <motion.div
      key="modal"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: 20 }}
      transition={{ duration: 0.2 }}
      className="fixed inset-0 z-[var(--z-modal)] bg-white p-6 shadow-xl"
    >
      <motion.div layoutId="modal-content">
        Contenu de la modal
      </motion.div>
    </motion.div>
  )}
</AnimatePresence>
```

---

## Exemple – Changement de page ou étape (ex: stepper)

```tsx
<motion.div
  key={step}
  initial={{ x: 50, opacity: 0 }}
  animate={{ x: 0, opacity: 1 }}
  exit={{ x: -50, opacity: 0 }}
  transition={{ duration: 0.3 }}
>
  <StepContent step={step} />
</motion.div>
```

---

## Bonnes pratiques

- Toujours envelopper les composants conditionnels dans `<AnimatePresence>`
- Donner une `key` unique et stable au composant animé (ex: `key={step}`, `key={guest.id}`)
- Utiliser `layoutId` pour les éléments qui doivent se transformer entre deux vues
- Centraliser les variantes complexes dans un fichier `motion/variants.ts`
- Les animations doivent **accélérer la compréhension visuelle**, jamais la ralentir

---

## Accessibilité

- Les transitions doivent être compatibles avec `prefers-reduced-motion`
- Ne jamais bloquer le focus pendant une animation (ex: dans un modal)

---

## Règle d’or

Une bonne transition ne détourne pas l’attention, elle guide le regard vers ce qui a changé.
Si tu la remarques trop, c’est qu’elle est en trop.
