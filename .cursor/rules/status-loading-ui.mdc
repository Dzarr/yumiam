---
description: Convention d’affichage des états de chargement, vide et erreur dans les interfaces React
globs: src/components/**/*.{tsx,jsx}
alwaysApply: true
---

# Rule 5.3 – États de chargement, vide et erreur (status-loading-ui)

## Objectif

Fournir une UX fluide, rassurante et cohérente en gérant explicitement les trois états clés des composants de données : `loading`, `empty` et `error`, avec des composants visuels dédiés, accessibles et réutilisables.

## Technologies concernées

- React (TSX/JSX)
- React Query
- TailwindCSS
- ShadCN/UI
- `sonner` (en complément)

## Principes

- Chaque composant ou page qui récupère des données doit gérer :
  - `isLoading` → indicateur de chargement
  - `isError` → message d’erreur
  - `!data.length` → état vide
- Les composants doivent être :
  - minimalistes, mais explicites
  - stylés avec Tailwind
  - centralisés pour être réutilisables (`<LoadingScreen />`, `<EmptyState />`, `<ErrorCard />`)
  - accessibles aux lecteurs d’écran

## Exemple d’usage

```tsx
const { data, isLoading, isError } = useGuests();

if (isLoading) return <LoadingScreen />;
if (isError) return <ErrorCard message="Impossible de charger les invités" />;
if (!data || data.length === 0) return <EmptyState message="Aucun invité pour l’instant" />;

return <GuestList guests={data} />;
```

## Exemple – LoadingScreen
```tsx
export const LoadingScreen = () => (
  <div role="status" aria-live="polite" className="flex h-64 items-center justify-center text-muted-foreground">
    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
    Chargement…
  </div>
);
```

## Exemple – EmptyState
```tsx
export const EmptyState = ({ message }: { message: string }) => (
  <div className="text-center text-sm text-muted-foreground py-8">
    {message}
  </div>
);
```

## Exemple combiné avec Rule 5.1
```tsx
const { data, isLoading, isError } = useQuery({
  queryKey: ["guests"],
  queryFn: fetchGuests,
  onError: () => toast.error("Erreur lors du chargement des invités"),
});

if (isLoading) return <LoadingScreen />;
if (isError) return <ErrorCard message="Impossible de charger les invités" />;
if (!data || data.length === 0) return <EmptyState message="Aucun invité pour l’instant" />;
```
## Bonnes pratiques
Ne jamais laisser un écran vide ou silencieux
Ajouter un bouton Réessayer ou Reload si erreur réseau
Ne pas bloquer l’interface avec un return null
Les composants peuvent s’adapter à leur contexte (table, carte, pleine page)

## Accessibilité
Ajoute role="status" et aria-live="polite" pour LoadingScreen
Rédige des messages explicites pour l’erreur (ErrorCard)
Ne pas afficher de jargon technique ou code d’erreur brut

## Règle d’or
Si l’interface hésite, l’utilisateur s’inquiète.
Si ça charge → montre-le.
Si c’est vide → explique-le.
Si ça plante → rassure.